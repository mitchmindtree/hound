var searchIndex = {};
searchIndex['hound'] = {"items":[[0,"","hound","Hound, a wav encoding and decoding library.",null,null],[3,"WavReader","","A reader that reads the WAVE format from the underlying reader.",null,null],[3,"WavIntoSamples","","An iterator that yields samples of type `S` read from a `WavReader`.",null,null],[3,"WavSamples","","An iterator that yields samples of type `S` read from a `WavReader`.",null,null],[3,"WavWriter","","A writer that accepts samples and writes the WAVE format.",null,null],[3,"WavSpec","","Specifies properties of the audio data.",null,null],[12,"channels","","The number of channels.",0,null],[12,"sample_rate","","The number of samples per second.",0,null],[12,"bits_per_sample","","The number of bits per sample.",0,null],[4,"Error","","The error type for operations on `WavReader` and `WavWriter`.",null,null],[13,"IoError","","An IO error occured in the underlying reader or writer.",1,null],[13,"FormatError","","Ill-formed WAVE data was encountered.",1,null],[13,"TooWide","","The sample has more bits than the destination type.",1,null],[13,"UnfinishedSample","","The number of samples written is not a multiple of the number of channels.",1,null],[13,"Unsupported","","The format is not supported.",1,null],[11,"new","","Attempts to create a reader that reads the WAVE format.",2,{"inputs":[{"name":"wavreader"},{"name":"r"}],"output":{"name":"result"}}],[11,"spec","","Returns information about the WAVE file.",2,{"inputs":[{"name":"wavreader"}],"output":{"name":"wavspec"}}],[11,"samples","","Returns an iterator over all samples.",2,{"inputs":[{"name":"wavreader"}],"output":{"name":"wavsamples"}}],[11,"into_samples","","Same as `samples`, but takes ownership of the `WavReader`.",2,{"inputs":[{"name":"wavreader"}],"output":{"name":"wavintosamples"}}],[11,"duration","","Returns the duration of the file in samples.",2,{"inputs":[{"name":"wavreader"}],"output":{"name":"u32"}}],[11,"len","","Returns the number of values that the sample iterator will yield.",2,{"inputs":[{"name":"wavreader"}],"output":{"name":"u32"}}],[11,"into_inner","","Destroys the `WavReader` and returns the underlying reader.",2,{"inputs":[{"name":"wavreader"}],"output":{"name":"r"}}],[11,"open","","Attempts to create a reader that reads from the specified file.",2,{"inputs":[{"name":"wavreader"},{"name":"p"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"wavsamples"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",4,{"inputs":[{"name":"wavintosamples"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"new","","Creates a writer that writes the WAVE format to the underlying writer.",5,{"inputs":[{"name":"wavwriter"},{"name":"w"},{"name":"wavspec"}],"output":{"name":"wavwriter"}}],[11,"write_sample","","Writes a single sample for one channel.",5,{"inputs":[{"name":"wavwriter"},{"name":"s"}],"output":{"name":"result"}}],[11,"finalize","","Writes the parts of the WAVE format that require knowing all samples.",5,{"inputs":[{"name":"wavwriter"}],"output":{"name":"result"}}],[11,"drop","","",5,{"inputs":[{"name":"wavwriter"}],"output":null}],[11,"create","","Creates a writer that writes the WAVE format to a file.",5,{"inputs":[{"name":"wavwriter"},{"name":"p"},{"name":"wavspec"}],"output":{"name":"result"}}],[6,"Result","","A type for results generated by Hound where the error type is hard-wired.",null,null],[8,"Sample","","A type that can be used to represent audio samples.",null,null],[10,"write","","Writes the audio sample to the WAVE data chunk.",6,{"inputs":[{"name":"sample"},{"name":"w"},{"name":"u16"}],"output":{"name":"result"}}],[10,"read","","Reads the audio sample from the WAVE data chunk.",6,{"inputs":[{"name":"sample"},{"name":"r"},{"name":"u16"},{"name":"u16"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"wavspec"},{"name":"wavspec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"wavspec"},{"name":"wavspec"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"wavspec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"wavspec"}],"output":{"name":"wavspec"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}]],"paths":[[3,"WavSpec"],[4,"Error"],[3,"WavReader"],[3,"WavSamples"],[3,"WavIntoSamples"],[3,"WavWriter"],[8,"Sample"]]};
initSearch(searchIndex);
